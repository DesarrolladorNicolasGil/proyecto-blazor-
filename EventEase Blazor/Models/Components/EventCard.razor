@* [5 pts] Componente fundacional generado con Copilot: Event Card *@
@* Usa @bind-IsRegistered para vinculación bidireccional *@

<div class="event-card @(Event.IsRegistered ? "registered" : "")">
    <h4>@Event.Title</h4>
    <p>Fecha: @Event.Date.ToShortDateString()</p>
    <p>Ubicación: @Event.Location</p>

    <div class="form-check">
        <input type="checkbox" class="form-check-input" id="event-@Event.EventId" 
               @bind-checked="IsRegistered" 
               @bind-checked:after="OnRegistrationChanged" />
        <label class="form-check-label" for="event-@Event.EventId">
            @if (Event.IsRegistered)
            {
                <span class="text-success">✅ Registrado</span>
            }
            else
            {
                <span class="text-secondary">Regístrese para este evento</span>
            }
        </label>
    </div>
</div>

@code {
    [Parameter]
    public EventModel Event { get; set; }

    // [5 pts] Vinculación de datos bidireccional (EventModel.IsRegistered <-> IsRegistered)
    private bool IsRegistered
    {
        get => Event.IsRegistered;
        set => Event.IsRegistered = value;
    }

    // [5 pts] Requisito: Registro de asistencia (simulado)
    private void OnRegistrationChanged()
    {
        // Esto notificaría al componente padre (si se usa un EventCallback),
        // pero aquí actualiza el estado local y simula la lógica.
        Console.WriteLine($"El usuario ha cambiado el registro para {Event.Title} a: {Event.IsRegistered}");
    }
}

<style>
    .event-card {
        border: 1px solid #ccc;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 5px;
        transition: background-color 0.3s;
    }
    .event-card.registered {
        background-color: #e6ffe6;
        border-color: #4CAF50;
    }
</style>